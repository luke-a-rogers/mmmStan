// Generated by rstantools.  Do not edit by hand.

/*
    mmmstan is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    mmmstan is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with mmmstan.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_mmm_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_mmm");
    reader.add_event(175, 173, "end", "model_mmm");
    return reader;
}
template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, Eigen::Dynamic>
mat_power(const Eigen::Matrix<T0__, Eigen::Dynamic, Eigen::Dynamic>& a,
              const int& n, std::ostream* pstream__);
template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, Eigen::Dynamic>
mat_power(const Eigen::Matrix<T0__, Eigen::Dynamic, Eigen::Dynamic>& a,
              const int& n, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        current_statement_begin__ = 6;
        if (as_bool(logical_eq(n, 0))) {
            current_statement_begin__ = 7;
            return stan::math::promote_scalar<fun_return_scalar_t__>(diag_matrix(rep_vector(1, rows(a))));
        } else if (as_bool(logical_eq(n, 1))) {
            current_statement_begin__ = 9;
            return stan::math::promote_scalar<fun_return_scalar_t__>(a);
        } else {
            current_statement_begin__ = 11;
            return stan::math::promote_scalar<fun_return_scalar_t__>(multiply(a, mat_power(a, (n - 1), pstream__)));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct mat_power_functor__ {
    template <typename T0__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, Eigen::Dynamic>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, Eigen::Dynamic>& a,
              const int& n, std::ostream* pstream__) const {
        return mat_power(a, n, pstream__);
    }
};
#include <stan_meta_header.hpp>
class model_mmm
  : public stan::model::model_base_crtp<model_mmm> {
private:
        int A;
        int G;
        int L;
        int T;
        std::vector<std::vector<std::vector<std::vector<std::vector<int> > > > > x;
        double d;
        double f;
        double h;
        double m;
        int ST;
        int Y;
public:
    model_mmm(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_mmm(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_mmm_namespace::model_mmm";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 17;
            context__.validate_dims("data initialization", "A", "int", context__.to_vec());
            A = int(0);
            vals_i__ = context__.vals_i("A");
            pos__ = 0;
            A = vals_i__[pos__++];
            current_statement_begin__ = 18;
            context__.validate_dims("data initialization", "G", "int", context__.to_vec());
            G = int(0);
            vals_i__ = context__.vals_i("G");
            pos__ = 0;
            G = vals_i__[pos__++];
            current_statement_begin__ = 19;
            context__.validate_dims("data initialization", "L", "int", context__.to_vec());
            L = int(0);
            vals_i__ = context__.vals_i("L");
            pos__ = 0;
            L = vals_i__[pos__++];
            current_statement_begin__ = 20;
            context__.validate_dims("data initialization", "T", "int", context__.to_vec());
            T = int(0);
            vals_i__ = context__.vals_i("T");
            pos__ = 0;
            T = vals_i__[pos__++];
            current_statement_begin__ = 23;
            validate_non_negative_index("x", "T", T);
            validate_non_negative_index("x", "A", A);
            validate_non_negative_index("x", "G", G);
            validate_non_negative_index("x", "L", L);
            validate_non_negative_index("x", "A", A);
            context__.validate_dims("data initialization", "x", "int", context__.to_vec(T,A,G,L,A));
            x = std::vector<std::vector<std::vector<std::vector<std::vector<int> > > > >(T, std::vector<std::vector<std::vector<std::vector<int> > > >(A, std::vector<std::vector<std::vector<int> > >(G, std::vector<std::vector<int> >(L, std::vector<int>(A, int(0))))));
            vals_i__ = context__.vals_i("x");
            pos__ = 0;
            size_t x_k_0_max__ = T;
            size_t x_k_1_max__ = A;
            size_t x_k_2_max__ = G;
            size_t x_k_3_max__ = L;
            size_t x_k_4_max__ = A;
            for (size_t k_4__ = 0; k_4__ < x_k_4_max__; ++k_4__) {
                for (size_t k_3__ = 0; k_3__ < x_k_3_max__; ++k_3__) {
                    for (size_t k_2__ = 0; k_2__ < x_k_2_max__; ++k_2__) {
                        for (size_t k_1__ = 0; k_1__ < x_k_1_max__; ++k_1__) {
                            for (size_t k_0__ = 0; k_0__ < x_k_0_max__; ++k_0__) {
                                x[k_0__][k_1__][k_2__][k_3__][k_4__] = vals_i__[pos__++];
                            }
                        }
                    }
                }
            }
            current_statement_begin__ = 26;
            context__.validate_dims("data initialization", "d", "double", context__.to_vec());
            d = double(0);
            vals_r__ = context__.vals_r("d");
            pos__ = 0;
            d = vals_r__[pos__++];
            current_statement_begin__ = 27;
            context__.validate_dims("data initialization", "f", "double", context__.to_vec());
            f = double(0);
            vals_r__ = context__.vals_r("f");
            pos__ = 0;
            f = vals_r__[pos__++];
            current_statement_begin__ = 28;
            context__.validate_dims("data initialization", "h", "double", context__.to_vec());
            h = double(0);
            vals_r__ = context__.vals_r("h");
            pos__ = 0;
            h = vals_r__[pos__++];
            current_statement_begin__ = 29;
            context__.validate_dims("data initialization", "m", "double", context__.to_vec());
            m = double(0);
            vals_r__ = context__.vals_r("m");
            pos__ = 0;
            m = vals_r__[pos__++];
            // initialize transformed data variables
            current_statement_begin__ = 33;
            ST = int(0);
            stan::math::fill(ST, std::numeric_limits<int>::min());
            stan::math::assign(ST,(T + (L - 1)));
            current_statement_begin__ = 34;
            Y = int(0);
            stan::math::fill(Y, std::numeric_limits<int>::min());
            stan::math::assign(Y,0);
            // execute transformed data statements
            current_statement_begin__ = 35;
            for (int mt = 1; mt <= T; ++mt) {
                current_statement_begin__ = 36;
                for (int ma = 1; ma <= A; ++ma) {
                    current_statement_begin__ = 37;
                    for (int mg = 1; mg <= G; ++mg) {
                        current_statement_begin__ = 38;
                        if (as_bool(logical_gt(get_base1(get_base1(get_base1(get_base1(get_base1(x, mt, "x", 1), ma, "x", 2), mg, "x", 3), 1, "x", 4), ma, "x", 5), 0))) {
                            current_statement_begin__ = 39;
                            stan::math::assign(Y, (Y + (L * A)));
                        }
                    }
                }
            }
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 49;
            validate_non_negative_index("p11", "2", 2);
            num_params_r__ += (2 - 1);
            current_statement_begin__ = 50;
            validate_non_negative_index("p12", "3", 3);
            num_params_r__ += (3 - 1);
            current_statement_begin__ = 51;
            validate_non_negative_index("p13", "2", 2);
            num_params_r__ += (2 - 1);
            current_statement_begin__ = 53;
            validate_non_negative_index("p21", "2", 2);
            num_params_r__ += (2 - 1);
            current_statement_begin__ = 54;
            validate_non_negative_index("p22", "3", 3);
            num_params_r__ += (3 - 1);
            current_statement_begin__ = 55;
            validate_non_negative_index("p23", "2", 2);
            num_params_r__ += (2 - 1);
            current_statement_begin__ = 57;
            validate_non_negative_index("p31", "2", 2);
            num_params_r__ += (2 - 1);
            current_statement_begin__ = 58;
            validate_non_negative_index("p32", "3", 3);
            num_params_r__ += (3 - 1);
            current_statement_begin__ = 59;
            validate_non_negative_index("p33", "2", 2);
            num_params_r__ += (2 - 1);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_mmm() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 49;
        if (!(context__.contains_r("p11")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable p11 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("p11");
        pos__ = 0U;
        validate_non_negative_index("p11", "2", 2);
        context__.validate_dims("parameter initialization", "p11", "vector_d", context__.to_vec(2));
        Eigen::Matrix<double, Eigen::Dynamic, 1> p11(2);
        size_t p11_j_1_max__ = 2;
        for (size_t j_1__ = 0; j_1__ < p11_j_1_max__; ++j_1__) {
            p11(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.simplex_unconstrain(p11);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable p11: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 50;
        if (!(context__.contains_r("p12")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable p12 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("p12");
        pos__ = 0U;
        validate_non_negative_index("p12", "3", 3);
        context__.validate_dims("parameter initialization", "p12", "vector_d", context__.to_vec(3));
        Eigen::Matrix<double, Eigen::Dynamic, 1> p12(3);
        size_t p12_j_1_max__ = 3;
        for (size_t j_1__ = 0; j_1__ < p12_j_1_max__; ++j_1__) {
            p12(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.simplex_unconstrain(p12);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable p12: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 51;
        if (!(context__.contains_r("p13")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable p13 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("p13");
        pos__ = 0U;
        validate_non_negative_index("p13", "2", 2);
        context__.validate_dims("parameter initialization", "p13", "vector_d", context__.to_vec(2));
        Eigen::Matrix<double, Eigen::Dynamic, 1> p13(2);
        size_t p13_j_1_max__ = 2;
        for (size_t j_1__ = 0; j_1__ < p13_j_1_max__; ++j_1__) {
            p13(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.simplex_unconstrain(p13);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable p13: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 53;
        if (!(context__.contains_r("p21")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable p21 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("p21");
        pos__ = 0U;
        validate_non_negative_index("p21", "2", 2);
        context__.validate_dims("parameter initialization", "p21", "vector_d", context__.to_vec(2));
        Eigen::Matrix<double, Eigen::Dynamic, 1> p21(2);
        size_t p21_j_1_max__ = 2;
        for (size_t j_1__ = 0; j_1__ < p21_j_1_max__; ++j_1__) {
            p21(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.simplex_unconstrain(p21);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable p21: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 54;
        if (!(context__.contains_r("p22")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable p22 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("p22");
        pos__ = 0U;
        validate_non_negative_index("p22", "3", 3);
        context__.validate_dims("parameter initialization", "p22", "vector_d", context__.to_vec(3));
        Eigen::Matrix<double, Eigen::Dynamic, 1> p22(3);
        size_t p22_j_1_max__ = 3;
        for (size_t j_1__ = 0; j_1__ < p22_j_1_max__; ++j_1__) {
            p22(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.simplex_unconstrain(p22);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable p22: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 55;
        if (!(context__.contains_r("p23")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable p23 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("p23");
        pos__ = 0U;
        validate_non_negative_index("p23", "2", 2);
        context__.validate_dims("parameter initialization", "p23", "vector_d", context__.to_vec(2));
        Eigen::Matrix<double, Eigen::Dynamic, 1> p23(2);
        size_t p23_j_1_max__ = 2;
        for (size_t j_1__ = 0; j_1__ < p23_j_1_max__; ++j_1__) {
            p23(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.simplex_unconstrain(p23);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable p23: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 57;
        if (!(context__.contains_r("p31")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable p31 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("p31");
        pos__ = 0U;
        validate_non_negative_index("p31", "2", 2);
        context__.validate_dims("parameter initialization", "p31", "vector_d", context__.to_vec(2));
        Eigen::Matrix<double, Eigen::Dynamic, 1> p31(2);
        size_t p31_j_1_max__ = 2;
        for (size_t j_1__ = 0; j_1__ < p31_j_1_max__; ++j_1__) {
            p31(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.simplex_unconstrain(p31);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable p31: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 58;
        if (!(context__.contains_r("p32")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable p32 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("p32");
        pos__ = 0U;
        validate_non_negative_index("p32", "3", 3);
        context__.validate_dims("parameter initialization", "p32", "vector_d", context__.to_vec(3));
        Eigen::Matrix<double, Eigen::Dynamic, 1> p32(3);
        size_t p32_j_1_max__ = 3;
        for (size_t j_1__ = 0; j_1__ < p32_j_1_max__; ++j_1__) {
            p32(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.simplex_unconstrain(p32);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable p32: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 59;
        if (!(context__.contains_r("p33")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable p33 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("p33");
        pos__ = 0U;
        validate_non_negative_index("p33", "2", 2);
        context__.validate_dims("parameter initialization", "p33", "vector_d", context__.to_vec(2));
        Eigen::Matrix<double, Eigen::Dynamic, 1> p33(2);
        size_t p33_j_1_max__ = 2;
        for (size_t j_1__ = 0; j_1__ < p33_j_1_max__; ++j_1__) {
            p33(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.simplex_unconstrain(p33);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable p33: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 49;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> p11;
            (void) p11;  // dummy to suppress unused var warning
            if (jacobian__)
                p11 = in__.simplex_constrain(2, lp__);
            else
                p11 = in__.simplex_constrain(2);
            current_statement_begin__ = 50;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> p12;
            (void) p12;  // dummy to suppress unused var warning
            if (jacobian__)
                p12 = in__.simplex_constrain(3, lp__);
            else
                p12 = in__.simplex_constrain(3);
            current_statement_begin__ = 51;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> p13;
            (void) p13;  // dummy to suppress unused var warning
            if (jacobian__)
                p13 = in__.simplex_constrain(2, lp__);
            else
                p13 = in__.simplex_constrain(2);
            current_statement_begin__ = 53;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> p21;
            (void) p21;  // dummy to suppress unused var warning
            if (jacobian__)
                p21 = in__.simplex_constrain(2, lp__);
            else
                p21 = in__.simplex_constrain(2);
            current_statement_begin__ = 54;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> p22;
            (void) p22;  // dummy to suppress unused var warning
            if (jacobian__)
                p22 = in__.simplex_constrain(3, lp__);
            else
                p22 = in__.simplex_constrain(3);
            current_statement_begin__ = 55;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> p23;
            (void) p23;  // dummy to suppress unused var warning
            if (jacobian__)
                p23 = in__.simplex_constrain(2, lp__);
            else
                p23 = in__.simplex_constrain(2);
            current_statement_begin__ = 57;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> p31;
            (void) p31;  // dummy to suppress unused var warning
            if (jacobian__)
                p31 = in__.simplex_constrain(2, lp__);
            else
                p31 = in__.simplex_constrain(2);
            current_statement_begin__ = 58;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> p32;
            (void) p32;  // dummy to suppress unused var warning
            if (jacobian__)
                p32 = in__.simplex_constrain(3, lp__);
            else
                p32 = in__.simplex_constrain(3);
            current_statement_begin__ = 59;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> p33;
            (void) p33;  // dummy to suppress unused var warning
            if (jacobian__)
                p33 = in__.simplex_constrain(2, lp__);
            else
                p33 = in__.simplex_constrain(2);
            // transformed parameters
            current_statement_begin__ = 63;
            validate_non_negative_index("p", "G", G);
            validate_non_negative_index("p", "A", A);
            validate_non_negative_index("p", "A", A);
            std::vector<std::vector<std::vector<local_scalar_t__> > > p(G, std::vector<std::vector<local_scalar_t__> >(A, std::vector<local_scalar_t__>(A, local_scalar_t__(0))));
            stan::math::initialize(p, DUMMY_VAR__);
            stan::math::fill(p, DUMMY_VAR__);
            // transformed parameters block statements
            current_statement_begin__ = 64;
            stan::math::assign(p, rep_array(1e-12, G, A, A));
            current_statement_begin__ = 66;
            stan::model::assign(p, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()))), 
                        get_base1(p11, 1, "p11", 1), 
                        "assigning variable p");
            current_statement_begin__ = 67;
            stan::model::assign(p, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(2), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()))), 
                        get_base1(p11, 2, "p11", 1), 
                        "assigning variable p");
            current_statement_begin__ = 68;
            stan::model::assign(p, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list()))), 
                        get_base1(p12, 1, "p12", 1), 
                        "assigning variable p");
            current_statement_begin__ = 69;
            stan::model::assign(p, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(2), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list()))), 
                        get_base1(p12, 2, "p12", 1), 
                        "assigning variable p");
            current_statement_begin__ = 70;
            stan::model::assign(p, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(3), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list()))), 
                        get_base1(p12, 3, "p12", 1), 
                        "assigning variable p");
            current_statement_begin__ = 71;
            stan::model::assign(p, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(2), stan::model::cons_list(stan::model::index_uni(3), stan::model::nil_index_list()))), 
                        get_base1(p13, 1, "p13", 1), 
                        "assigning variable p");
            current_statement_begin__ = 72;
            stan::model::assign(p, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(3), stan::model::cons_list(stan::model::index_uni(3), stan::model::nil_index_list()))), 
                        get_base1(p13, 2, "p13", 1), 
                        "assigning variable p");
            current_statement_begin__ = 74;
            stan::model::assign(p, 
                        stan::model::cons_list(stan::model::index_uni(2), stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()))), 
                        get_base1(p21, 1, "p21", 1), 
                        "assigning variable p");
            current_statement_begin__ = 75;
            stan::model::assign(p, 
                        stan::model::cons_list(stan::model::index_uni(2), stan::model::cons_list(stan::model::index_uni(2), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()))), 
                        get_base1(p21, 2, "p21", 1), 
                        "assigning variable p");
            current_statement_begin__ = 76;
            stan::model::assign(p, 
                        stan::model::cons_list(stan::model::index_uni(2), stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list()))), 
                        get_base1(p22, 1, "p22", 1), 
                        "assigning variable p");
            current_statement_begin__ = 77;
            stan::model::assign(p, 
                        stan::model::cons_list(stan::model::index_uni(2), stan::model::cons_list(stan::model::index_uni(2), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list()))), 
                        get_base1(p22, 2, "p22", 1), 
                        "assigning variable p");
            current_statement_begin__ = 78;
            stan::model::assign(p, 
                        stan::model::cons_list(stan::model::index_uni(2), stan::model::cons_list(stan::model::index_uni(3), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list()))), 
                        get_base1(p22, 3, "p22", 1), 
                        "assigning variable p");
            current_statement_begin__ = 79;
            stan::model::assign(p, 
                        stan::model::cons_list(stan::model::index_uni(2), stan::model::cons_list(stan::model::index_uni(2), stan::model::cons_list(stan::model::index_uni(3), stan::model::nil_index_list()))), 
                        get_base1(p23, 1, "p23", 1), 
                        "assigning variable p");
            current_statement_begin__ = 80;
            stan::model::assign(p, 
                        stan::model::cons_list(stan::model::index_uni(2), stan::model::cons_list(stan::model::index_uni(3), stan::model::cons_list(stan::model::index_uni(3), stan::model::nil_index_list()))), 
                        get_base1(p23, 2, "p23", 1), 
                        "assigning variable p");
            current_statement_begin__ = 82;
            stan::model::assign(p, 
                        stan::model::cons_list(stan::model::index_uni(3), stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()))), 
                        get_base1(p31, 1, "p31", 1), 
                        "assigning variable p");
            current_statement_begin__ = 83;
            stan::model::assign(p, 
                        stan::model::cons_list(stan::model::index_uni(3), stan::model::cons_list(stan::model::index_uni(2), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()))), 
                        get_base1(p31, 2, "p31", 1), 
                        "assigning variable p");
            current_statement_begin__ = 84;
            stan::model::assign(p, 
                        stan::model::cons_list(stan::model::index_uni(3), stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list()))), 
                        get_base1(p32, 1, "p32", 1), 
                        "assigning variable p");
            current_statement_begin__ = 85;
            stan::model::assign(p, 
                        stan::model::cons_list(stan::model::index_uni(3), stan::model::cons_list(stan::model::index_uni(2), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list()))), 
                        get_base1(p32, 2, "p32", 1), 
                        "assigning variable p");
            current_statement_begin__ = 86;
            stan::model::assign(p, 
                        stan::model::cons_list(stan::model::index_uni(3), stan::model::cons_list(stan::model::index_uni(3), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list()))), 
                        get_base1(p32, 3, "p32", 1), 
                        "assigning variable p");
            current_statement_begin__ = 87;
            stan::model::assign(p, 
                        stan::model::cons_list(stan::model::index_uni(3), stan::model::cons_list(stan::model::index_uni(2), stan::model::cons_list(stan::model::index_uni(3), stan::model::nil_index_list()))), 
                        get_base1(p33, 1, "p33", 1), 
                        "assigning variable p");
            current_statement_begin__ = 88;
            stan::model::assign(p, 
                        stan::model::cons_list(stan::model::index_uni(3), stan::model::cons_list(stan::model::index_uni(3), stan::model::cons_list(stan::model::index_uni(3), stan::model::nil_index_list()))), 
                        get_base1(p33, 2, "p33", 1), 
                        "assigning variable p");
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 63;
            size_t p_k_0_max__ = G;
            size_t p_k_1_max__ = A;
            size_t p_k_2_max__ = A;
            for (size_t k_0__ = 0; k_0__ < p_k_0_max__; ++k_0__) {
                for (size_t k_1__ = 0; k_1__ < p_k_1_max__; ++k_1__) {
                    for (size_t k_2__ = 0; k_2__ < p_k_2_max__; ++k_2__) {
                        if (stan::math::is_uninitialized(p[k_0__][k_1__][k_2__])) {
                            std::stringstream msg__;
                            msg__ << "Undefined transformed parameter: p" << "[" << k_0__ << "]" << "[" << k_1__ << "]" << "[" << k_2__ << "]";
                            stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable p: ") + msg__.str()), current_statement_begin__, prog_reader__());
                        }
                    }
                }
            }
            // model body
            {
            current_statement_begin__ = 93;
            validate_non_negative_index("n", "T", T);
            validate_non_negative_index("n", "A", A);
            validate_non_negative_index("n", "G", G);
            validate_non_negative_index("n", "L", L);
            validate_non_negative_index("n", "A", A);
            std::vector<std::vector<std::vector<std::vector<std::vector<local_scalar_t__  >  >  >  >  > n(T, std::vector<std::vector<std::vector<std::vector<local_scalar_t__> > > >(A, std::vector<std::vector<std::vector<local_scalar_t__> > >(G, std::vector<std::vector<local_scalar_t__> >(L, std::vector<local_scalar_t__>(A, local_scalar_t__(DUMMY_VAR__))))));
            stan::math::initialize(n, DUMMY_VAR__);
            stan::math::fill(n, DUMMY_VAR__);
            current_statement_begin__ = 94;
            validate_non_negative_index("s", "G", G);
            validate_non_negative_index("s", "ST", ST);
            validate_non_negative_index("s", "A", A);
            std::vector<std::vector<std::vector<local_scalar_t__  >  >  > s(G, std::vector<std::vector<local_scalar_t__> >(ST, std::vector<local_scalar_t__>(A, local_scalar_t__(DUMMY_VAR__))));
            stan::math::initialize(s, DUMMY_VAR__);
            stan::math::fill(s, DUMMY_VAR__);
            current_statement_begin__ = 95;
            validate_non_negative_index("y_vec", "Y", Y);
            std::vector<int  > y_vec(Y, int(0));
            stan::math::fill(y_vec, std::numeric_limits<int>::min());
            current_statement_begin__ = 96;
            validate_non_negative_index("y_hat", "Y", Y);
            std::vector<local_scalar_t__  > y_hat(Y, local_scalar_t__(DUMMY_VAR__));
            stan::math::initialize(y_hat, DUMMY_VAR__);
            stan::math::fill(y_hat, DUMMY_VAR__);
            current_statement_begin__ = 97;
            int y_ind(0);
            (void) y_ind;  // dummy to suppress unused var warning
            stan::math::fill(y_ind, std::numeric_limits<int>::min());
            current_statement_begin__ = 98;
            validate_non_negative_index("n_sub", "T", T);
            validate_non_negative_index("n_sub", "A", A);
            std::vector<std::vector<local_scalar_t__  >  > n_sub(T, std::vector<local_scalar_t__>(A, local_scalar_t__(DUMMY_VAR__)));
            stan::math::initialize(n_sub, DUMMY_VAR__);
            stan::math::fill(n_sub, DUMMY_VAR__);
            current_statement_begin__ = 99;
            stan::math::assign(n, rep_array(rep_array(0, L, A), T, A, G));
            current_statement_begin__ = 100;
            stan::math::assign(s, rep_array(0, G, ST, A));
            current_statement_begin__ = 101;
            stan::math::assign(y_vec, rep_array(0, Y));
            current_statement_begin__ = 102;
            stan::math::assign(y_hat, rep_array(0, Y));
            current_statement_begin__ = 103;
            stan::math::assign(y_ind, 1);
            current_statement_begin__ = 106;
            for (int mg = 1; mg <= G; ++mg) {
                current_statement_begin__ = 107;
                for (int ct = 1; ct <= ST; ++ct) {
                    current_statement_begin__ = 108;
                    for (int ca = 1; ca <= A; ++ca) {
                        current_statement_begin__ = 109;
                        stan::model::assign(s, 
                                    stan::model::cons_list(stan::model::index_uni(mg), stan::model::cons_list(stan::model::index_uni(ct), stan::model::cons_list(stan::model::index_uni(ca), stan::model::nil_index_list()))), 
                                    stan::math::exp(((-(f) - m) - h)), 
                                    "assigning variable s");
                    }
                }
            }
            current_statement_begin__ = 115;
            for (int mt = 1; mt <= T; ++mt) {
                current_statement_begin__ = 116;
                for (int ma = 1; ma <= A; ++ma) {
                    current_statement_begin__ = 117;
                    for (int mg = 1; mg <= G; ++mg) {
                        current_statement_begin__ = 118;
                        stan::model::assign(n, 
                                    stan::model::cons_list(stan::model::index_uni(mt), stan::model::cons_list(stan::model::index_uni(ma), stan::model::cons_list(stan::model::index_uni(mg), stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(ma), stan::model::nil_index_list()))))), 
                                    (d * get_base1(get_base1(get_base1(get_base1(get_base1(x, mt, "x", 1), ma, "x", 2), mg, "x", 3), 1, "x", 4), ma, "x", 5)), 
                                    "assigning variable n");
                    }
                }
            }
            current_statement_begin__ = 124;
            for (int mt = 1; mt <= T; ++mt) {
                current_statement_begin__ = 125;
                for (int ma = 1; ma <= A; ++ma) {
                    current_statement_begin__ = 126;
                    for (int mg = 1; mg <= G; ++mg) {
                        current_statement_begin__ = 127;
                        if (as_bool(logical_gt(get_base1(get_base1(get_base1(get_base1(get_base1(x, mt, "x", 1), ma, "x", 2), mg, "x", 3), 1, "x", 4), ma, "x", 5), 0))) {
                            current_statement_begin__ = 128;
                            for (int cl = 2; cl <= L; ++cl) {
                                current_statement_begin__ = 129;
                                for (int ca = 1; ca <= A; ++ca) {
                                    current_statement_begin__ = 130;
                                    for (int pa = 1; pa <= A; ++pa) {
                                        current_statement_begin__ = 131;
                                        stan::model::assign(n, 
                                                    stan::model::cons_list(stan::model::index_uni(mt), stan::model::cons_list(stan::model::index_uni(ma), stan::model::cons_list(stan::model::index_uni(mg), stan::model::cons_list(stan::model::index_uni(cl), stan::model::cons_list(stan::model::index_uni(ca), stan::model::nil_index_list()))))), 
                                                    (stan::model::rvalue(n, stan::model::cons_list(stan::model::index_uni(mt), stan::model::cons_list(stan::model::index_uni(ma), stan::model::cons_list(stan::model::index_uni(mg), stan::model::cons_list(stan::model::index_uni(cl), stan::model::cons_list(stan::model::index_uni(ca), stan::model::nil_index_list()))))), "n") + ((get_base1(get_base1(get_base1(get_base1(get_base1(n, mt, "n", 1), ma, "n", 2), mg, "n", 3), (cl - 1), "n", 4), pa, "n", 5) * get_base1(get_base1(get_base1(s, mg, "s", 1), ((mt + cl) - 2), "s", 2), pa, "s", 3)) * get_base1(get_base1(get_base1(p, mg, "p", 1), ca, "p", 2), pa, "p", 3))), 
                                                    "assigning variable n");
                                    }
                                }
                            }
                            current_statement_begin__ = 136;
                            for (int cl = 2; cl <= L; ++cl) {
                                current_statement_begin__ = 137;
                                for (int ca = 1; ca <= A; ++ca) {
                                    current_statement_begin__ = 138;
                                    stan::model::assign(y_vec, 
                                                stan::model::cons_list(stan::model::index_uni(y_ind), stan::model::nil_index_list()), 
                                                get_base1(get_base1(get_base1(get_base1(get_base1(x, mt, "x", 1), ma, "x", 2), mg, "x", 3), cl, "x", 4), ca, "x", 5), 
                                                "assigning variable y_vec");
                                    current_statement_begin__ = 139;
                                    stan::model::assign(y_hat, 
                                                stan::model::cons_list(stan::model::index_uni(y_ind), stan::model::nil_index_list()), 
                                                (get_base1(get_base1(get_base1(get_base1(get_base1(n, mt, "n", 1), ma, "n", 2), mg, "n", 3), cl, "n", 4), ca, "n", 5) * (1 - stan::math::exp(-(f)))), 
                                                "assigning variable y_hat");
                                    current_statement_begin__ = 140;
                                    stan::math::assign(y_ind, (y_ind + 1));
                                }
                            }
                        }
                    }
                }
            }
            current_statement_begin__ = 149;
            lp_accum__.add(poisson_log<propto__>(y_vec, y_hat));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("p11");
        names__.push_back("p12");
        names__.push_back("p13");
        names__.push_back("p21");
        names__.push_back("p22");
        names__.push_back("p23");
        names__.push_back("p31");
        names__.push_back("p32");
        names__.push_back("p33");
        names__.push_back("p");
        names__.push_back("p_matrix");
        names__.push_back("p_matrix_annual");
        names__.push_back("p_annual");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(2);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(3);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(2);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(2);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(3);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(2);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(2);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(3);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(2);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(G);
        dims__.push_back(A);
        dims__.push_back(A);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(G);
        dims__.push_back(A);
        dims__.push_back(A);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(G);
        dims__.push_back(A);
        dims__.push_back(A);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(A);
        dims__.push_back(A);
        dims__.push_back(G);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_mmm_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        Eigen::Matrix<double, Eigen::Dynamic, 1> p11 = in__.simplex_constrain(2);
        size_t p11_j_1_max__ = 2;
        for (size_t j_1__ = 0; j_1__ < p11_j_1_max__; ++j_1__) {
            vars__.push_back(p11(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> p12 = in__.simplex_constrain(3);
        size_t p12_j_1_max__ = 3;
        for (size_t j_1__ = 0; j_1__ < p12_j_1_max__; ++j_1__) {
            vars__.push_back(p12(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> p13 = in__.simplex_constrain(2);
        size_t p13_j_1_max__ = 2;
        for (size_t j_1__ = 0; j_1__ < p13_j_1_max__; ++j_1__) {
            vars__.push_back(p13(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> p21 = in__.simplex_constrain(2);
        size_t p21_j_1_max__ = 2;
        for (size_t j_1__ = 0; j_1__ < p21_j_1_max__; ++j_1__) {
            vars__.push_back(p21(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> p22 = in__.simplex_constrain(3);
        size_t p22_j_1_max__ = 3;
        for (size_t j_1__ = 0; j_1__ < p22_j_1_max__; ++j_1__) {
            vars__.push_back(p22(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> p23 = in__.simplex_constrain(2);
        size_t p23_j_1_max__ = 2;
        for (size_t j_1__ = 0; j_1__ < p23_j_1_max__; ++j_1__) {
            vars__.push_back(p23(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> p31 = in__.simplex_constrain(2);
        size_t p31_j_1_max__ = 2;
        for (size_t j_1__ = 0; j_1__ < p31_j_1_max__; ++j_1__) {
            vars__.push_back(p31(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> p32 = in__.simplex_constrain(3);
        size_t p32_j_1_max__ = 3;
        for (size_t j_1__ = 0; j_1__ < p32_j_1_max__; ++j_1__) {
            vars__.push_back(p32(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> p33 = in__.simplex_constrain(2);
        size_t p33_j_1_max__ = 2;
        for (size_t j_1__ = 0; j_1__ < p33_j_1_max__; ++j_1__) {
            vars__.push_back(p33(j_1__));
        }
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 63;
            validate_non_negative_index("p", "G", G);
            validate_non_negative_index("p", "A", A);
            validate_non_negative_index("p", "A", A);
            std::vector<std::vector<std::vector<double> > > p(G, std::vector<std::vector<double> >(A, std::vector<double>(A, double(0))));
            stan::math::initialize(p, DUMMY_VAR__);
            stan::math::fill(p, DUMMY_VAR__);
            // do transformed parameters statements
            current_statement_begin__ = 64;
            stan::math::assign(p, rep_array(1e-12, G, A, A));
            current_statement_begin__ = 66;
            stan::model::assign(p, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()))), 
                        get_base1(p11, 1, "p11", 1), 
                        "assigning variable p");
            current_statement_begin__ = 67;
            stan::model::assign(p, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(2), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()))), 
                        get_base1(p11, 2, "p11", 1), 
                        "assigning variable p");
            current_statement_begin__ = 68;
            stan::model::assign(p, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list()))), 
                        get_base1(p12, 1, "p12", 1), 
                        "assigning variable p");
            current_statement_begin__ = 69;
            stan::model::assign(p, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(2), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list()))), 
                        get_base1(p12, 2, "p12", 1), 
                        "assigning variable p");
            current_statement_begin__ = 70;
            stan::model::assign(p, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(3), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list()))), 
                        get_base1(p12, 3, "p12", 1), 
                        "assigning variable p");
            current_statement_begin__ = 71;
            stan::model::assign(p, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(2), stan::model::cons_list(stan::model::index_uni(3), stan::model::nil_index_list()))), 
                        get_base1(p13, 1, "p13", 1), 
                        "assigning variable p");
            current_statement_begin__ = 72;
            stan::model::assign(p, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(3), stan::model::cons_list(stan::model::index_uni(3), stan::model::nil_index_list()))), 
                        get_base1(p13, 2, "p13", 1), 
                        "assigning variable p");
            current_statement_begin__ = 74;
            stan::model::assign(p, 
                        stan::model::cons_list(stan::model::index_uni(2), stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()))), 
                        get_base1(p21, 1, "p21", 1), 
                        "assigning variable p");
            current_statement_begin__ = 75;
            stan::model::assign(p, 
                        stan::model::cons_list(stan::model::index_uni(2), stan::model::cons_list(stan::model::index_uni(2), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()))), 
                        get_base1(p21, 2, "p21", 1), 
                        "assigning variable p");
            current_statement_begin__ = 76;
            stan::model::assign(p, 
                        stan::model::cons_list(stan::model::index_uni(2), stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list()))), 
                        get_base1(p22, 1, "p22", 1), 
                        "assigning variable p");
            current_statement_begin__ = 77;
            stan::model::assign(p, 
                        stan::model::cons_list(stan::model::index_uni(2), stan::model::cons_list(stan::model::index_uni(2), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list()))), 
                        get_base1(p22, 2, "p22", 1), 
                        "assigning variable p");
            current_statement_begin__ = 78;
            stan::model::assign(p, 
                        stan::model::cons_list(stan::model::index_uni(2), stan::model::cons_list(stan::model::index_uni(3), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list()))), 
                        get_base1(p22, 3, "p22", 1), 
                        "assigning variable p");
            current_statement_begin__ = 79;
            stan::model::assign(p, 
                        stan::model::cons_list(stan::model::index_uni(2), stan::model::cons_list(stan::model::index_uni(2), stan::model::cons_list(stan::model::index_uni(3), stan::model::nil_index_list()))), 
                        get_base1(p23, 1, "p23", 1), 
                        "assigning variable p");
            current_statement_begin__ = 80;
            stan::model::assign(p, 
                        stan::model::cons_list(stan::model::index_uni(2), stan::model::cons_list(stan::model::index_uni(3), stan::model::cons_list(stan::model::index_uni(3), stan::model::nil_index_list()))), 
                        get_base1(p23, 2, "p23", 1), 
                        "assigning variable p");
            current_statement_begin__ = 82;
            stan::model::assign(p, 
                        stan::model::cons_list(stan::model::index_uni(3), stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()))), 
                        get_base1(p31, 1, "p31", 1), 
                        "assigning variable p");
            current_statement_begin__ = 83;
            stan::model::assign(p, 
                        stan::model::cons_list(stan::model::index_uni(3), stan::model::cons_list(stan::model::index_uni(2), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()))), 
                        get_base1(p31, 2, "p31", 1), 
                        "assigning variable p");
            current_statement_begin__ = 84;
            stan::model::assign(p, 
                        stan::model::cons_list(stan::model::index_uni(3), stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list()))), 
                        get_base1(p32, 1, "p32", 1), 
                        "assigning variable p");
            current_statement_begin__ = 85;
            stan::model::assign(p, 
                        stan::model::cons_list(stan::model::index_uni(3), stan::model::cons_list(stan::model::index_uni(2), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list()))), 
                        get_base1(p32, 2, "p32", 1), 
                        "assigning variable p");
            current_statement_begin__ = 86;
            stan::model::assign(p, 
                        stan::model::cons_list(stan::model::index_uni(3), stan::model::cons_list(stan::model::index_uni(3), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list()))), 
                        get_base1(p32, 3, "p32", 1), 
                        "assigning variable p");
            current_statement_begin__ = 87;
            stan::model::assign(p, 
                        stan::model::cons_list(stan::model::index_uni(3), stan::model::cons_list(stan::model::index_uni(2), stan::model::cons_list(stan::model::index_uni(3), stan::model::nil_index_list()))), 
                        get_base1(p33, 1, "p33", 1), 
                        "assigning variable p");
            current_statement_begin__ = 88;
            stan::model::assign(p, 
                        stan::model::cons_list(stan::model::index_uni(3), stan::model::cons_list(stan::model::index_uni(3), stan::model::cons_list(stan::model::index_uni(3), stan::model::nil_index_list()))), 
                        get_base1(p33, 2, "p33", 1), 
                        "assigning variable p");
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            // write transformed parameters
            if (include_tparams__) {
                size_t p_k_0_max__ = G;
                size_t p_k_1_max__ = A;
                size_t p_k_2_max__ = A;
                for (size_t k_2__ = 0; k_2__ < p_k_2_max__; ++k_2__) {
                    for (size_t k_1__ = 0; k_1__ < p_k_1_max__; ++k_1__) {
                        for (size_t k_0__ = 0; k_0__ < p_k_0_max__; ++k_0__) {
                            vars__.push_back(p[k_0__][k_1__][k_2__]);
                        }
                    }
                }
            }
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 154;
            validate_non_negative_index("p_matrix", "A", A);
            validate_non_negative_index("p_matrix", "A", A);
            validate_non_negative_index("p_matrix", "G", G);
            std::vector<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> > p_matrix(G, Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(A, A));
            stan::math::initialize(p_matrix, DUMMY_VAR__);
            stan::math::fill(p_matrix, DUMMY_VAR__);
            current_statement_begin__ = 155;
            validate_non_negative_index("p_matrix_annual", "A", A);
            validate_non_negative_index("p_matrix_annual", "A", A);
            validate_non_negative_index("p_matrix_annual", "G", G);
            std::vector<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> > p_matrix_annual(G, Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(A, A));
            stan::math::initialize(p_matrix_annual, DUMMY_VAR__);
            stan::math::fill(p_matrix_annual, DUMMY_VAR__);
            current_statement_begin__ = 156;
            validate_non_negative_index("p_annual", "A", A);
            validate_non_negative_index("p_annual", "A", A);
            validate_non_negative_index("p_annual", "G", G);
            std::vector<std::vector<std::vector<double> > > p_annual(A, std::vector<std::vector<double> >(A, std::vector<double>(G, double(0))));
            stan::math::initialize(p_annual, DUMMY_VAR__);
            stan::math::fill(p_annual, DUMMY_VAR__);
            // generated quantities statements
            current_statement_begin__ = 157;
            for (int mg = 1; mg <= G; ++mg) {
                current_statement_begin__ = 159;
                for (int pa = 1; pa <= A; ++pa) {
                    current_statement_begin__ = 160;
                    for (int ca = 1; ca <= A; ++ca) {
                        current_statement_begin__ = 161;
                        stan::model::assign(p_matrix, 
                                    stan::model::cons_list(stan::model::index_uni(mg), stan::model::cons_list(stan::model::index_uni(pa), stan::model::cons_list(stan::model::index_uni(ca), stan::model::nil_index_list()))), 
                                    get_base1(get_base1(get_base1(p, mg, "p", 1), ca, "p", 2), pa, "p", 3), 
                                    "assigning variable p_matrix");
                    }
                }
                current_statement_begin__ = 165;
                stan::model::assign(p_matrix_annual, 
                            stan::model::cons_list(stan::model::index_uni(mg), stan::model::nil_index_list()), 
                            mat_power(get_base1(p_matrix, mg, "p_matrix", 1), 12, pstream__), 
                            "assigning variable p_matrix_annual");
                current_statement_begin__ = 167;
                for (int pa = 1; pa <= A; ++pa) {
                    current_statement_begin__ = 168;
                    for (int ca = 1; ca <= A; ++ca) {
                        current_statement_begin__ = 169;
                        stan::model::assign(p_annual, 
                                    stan::model::cons_list(stan::model::index_uni(pa), stan::model::cons_list(stan::model::index_uni(ca), stan::model::cons_list(stan::model::index_uni(mg), stan::model::nil_index_list()))), 
                                    get_base1(get_base1(p_matrix_annual, mg, "p_matrix_annual", 1), pa, ca, "p_matrix_annual", 2), 
                                    "assigning variable p_annual");
                    }
                }
            }
            // validate, write generated quantities
            current_statement_begin__ = 154;
            size_t p_matrix_j_2_max__ = A;
            size_t p_matrix_j_1_max__ = A;
            size_t p_matrix_k_0_max__ = G;
            for (size_t j_2__ = 0; j_2__ < p_matrix_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < p_matrix_j_1_max__; ++j_1__) {
                    for (size_t k_0__ = 0; k_0__ < p_matrix_k_0_max__; ++k_0__) {
                        vars__.push_back(p_matrix[k_0__](j_1__, j_2__));
                    }
                }
            }
            current_statement_begin__ = 155;
            size_t p_matrix_annual_j_2_max__ = A;
            size_t p_matrix_annual_j_1_max__ = A;
            size_t p_matrix_annual_k_0_max__ = G;
            for (size_t j_2__ = 0; j_2__ < p_matrix_annual_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < p_matrix_annual_j_1_max__; ++j_1__) {
                    for (size_t k_0__ = 0; k_0__ < p_matrix_annual_k_0_max__; ++k_0__) {
                        vars__.push_back(p_matrix_annual[k_0__](j_1__, j_2__));
                    }
                }
            }
            current_statement_begin__ = 156;
            size_t p_annual_k_0_max__ = A;
            size_t p_annual_k_1_max__ = A;
            size_t p_annual_k_2_max__ = G;
            for (size_t k_2__ = 0; k_2__ < p_annual_k_2_max__; ++k_2__) {
                for (size_t k_1__ = 0; k_1__ < p_annual_k_1_max__; ++k_1__) {
                    for (size_t k_0__ = 0; k_0__ < p_annual_k_0_max__; ++k_0__) {
                        vars__.push_back(p_annual[k_0__][k_1__][k_2__]);
                    }
                }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_mmm";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t p11_j_1_max__ = 2;
        for (size_t j_1__ = 0; j_1__ < p11_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "p11" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t p12_j_1_max__ = 3;
        for (size_t j_1__ = 0; j_1__ < p12_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "p12" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t p13_j_1_max__ = 2;
        for (size_t j_1__ = 0; j_1__ < p13_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "p13" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t p21_j_1_max__ = 2;
        for (size_t j_1__ = 0; j_1__ < p21_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "p21" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t p22_j_1_max__ = 3;
        for (size_t j_1__ = 0; j_1__ < p22_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "p22" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t p23_j_1_max__ = 2;
        for (size_t j_1__ = 0; j_1__ < p23_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "p23" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t p31_j_1_max__ = 2;
        for (size_t j_1__ = 0; j_1__ < p31_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "p31" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t p32_j_1_max__ = 3;
        for (size_t j_1__ = 0; j_1__ < p32_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "p32" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t p33_j_1_max__ = 2;
        for (size_t j_1__ = 0; j_1__ < p33_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "p33" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t p_k_0_max__ = G;
            size_t p_k_1_max__ = A;
            size_t p_k_2_max__ = A;
            for (size_t k_2__ = 0; k_2__ < p_k_2_max__; ++k_2__) {
                for (size_t k_1__ = 0; k_1__ < p_k_1_max__; ++k_1__) {
                    for (size_t k_0__ = 0; k_0__ < p_k_0_max__; ++k_0__) {
                        param_name_stream__.str(std::string());
                        param_name_stream__ << "p" << '.' << k_0__ + 1 << '.' << k_1__ + 1 << '.' << k_2__ + 1;
                        param_names__.push_back(param_name_stream__.str());
                    }
                }
            }
        }
        if (!include_gqs__) return;
        size_t p_matrix_j_2_max__ = A;
        size_t p_matrix_j_1_max__ = A;
        size_t p_matrix_k_0_max__ = G;
        for (size_t j_2__ = 0; j_2__ < p_matrix_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < p_matrix_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < p_matrix_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "p_matrix" << '.' << k_0__ + 1 << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        size_t p_matrix_annual_j_2_max__ = A;
        size_t p_matrix_annual_j_1_max__ = A;
        size_t p_matrix_annual_k_0_max__ = G;
        for (size_t j_2__ = 0; j_2__ < p_matrix_annual_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < p_matrix_annual_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < p_matrix_annual_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "p_matrix_annual" << '.' << k_0__ + 1 << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        size_t p_annual_k_0_max__ = A;
        size_t p_annual_k_1_max__ = A;
        size_t p_annual_k_2_max__ = G;
        for (size_t k_2__ = 0; k_2__ < p_annual_k_2_max__; ++k_2__) {
            for (size_t k_1__ = 0; k_1__ < p_annual_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < p_annual_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "p_annual" << '.' << k_0__ + 1 << '.' << k_1__ + 1 << '.' << k_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t p11_j_1_max__ = (2 - 1);
        for (size_t j_1__ = 0; j_1__ < p11_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "p11" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t p12_j_1_max__ = (3 - 1);
        for (size_t j_1__ = 0; j_1__ < p12_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "p12" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t p13_j_1_max__ = (2 - 1);
        for (size_t j_1__ = 0; j_1__ < p13_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "p13" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t p21_j_1_max__ = (2 - 1);
        for (size_t j_1__ = 0; j_1__ < p21_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "p21" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t p22_j_1_max__ = (3 - 1);
        for (size_t j_1__ = 0; j_1__ < p22_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "p22" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t p23_j_1_max__ = (2 - 1);
        for (size_t j_1__ = 0; j_1__ < p23_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "p23" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t p31_j_1_max__ = (2 - 1);
        for (size_t j_1__ = 0; j_1__ < p31_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "p31" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t p32_j_1_max__ = (3 - 1);
        for (size_t j_1__ = 0; j_1__ < p32_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "p32" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t p33_j_1_max__ = (2 - 1);
        for (size_t j_1__ = 0; j_1__ < p33_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "p33" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t p_k_0_max__ = G;
            size_t p_k_1_max__ = A;
            size_t p_k_2_max__ = A;
            for (size_t k_2__ = 0; k_2__ < p_k_2_max__; ++k_2__) {
                for (size_t k_1__ = 0; k_1__ < p_k_1_max__; ++k_1__) {
                    for (size_t k_0__ = 0; k_0__ < p_k_0_max__; ++k_0__) {
                        param_name_stream__.str(std::string());
                        param_name_stream__ << "p" << '.' << k_0__ + 1 << '.' << k_1__ + 1 << '.' << k_2__ + 1;
                        param_names__.push_back(param_name_stream__.str());
                    }
                }
            }
        }
        if (!include_gqs__) return;
        size_t p_matrix_j_2_max__ = A;
        size_t p_matrix_j_1_max__ = A;
        size_t p_matrix_k_0_max__ = G;
        for (size_t j_2__ = 0; j_2__ < p_matrix_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < p_matrix_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < p_matrix_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "p_matrix" << '.' << k_0__ + 1 << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        size_t p_matrix_annual_j_2_max__ = A;
        size_t p_matrix_annual_j_1_max__ = A;
        size_t p_matrix_annual_k_0_max__ = G;
        for (size_t j_2__ = 0; j_2__ < p_matrix_annual_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < p_matrix_annual_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < p_matrix_annual_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "p_matrix_annual" << '.' << k_0__ + 1 << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        size_t p_annual_k_0_max__ = A;
        size_t p_annual_k_1_max__ = A;
        size_t p_annual_k_2_max__ = G;
        for (size_t k_2__ = 0; k_2__ < p_annual_k_2_max__; ++k_2__) {
            for (size_t k_1__ = 0; k_1__ < p_annual_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < p_annual_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "p_annual" << '.' << k_0__ + 1 << '.' << k_1__ + 1 << '.' << k_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
    }
}; // model
}  // namespace
typedef model_mmm_namespace::model_mmm stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
